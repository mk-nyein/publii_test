{
    "version": "https://jsonfeed.org/version/1",
    "title": "YUPT",
    "description": "",
    "home_page_url": "https://mk-nyein.github.io/publii_test",
    "feed_url": "https://mk-nyein.github.io/publii_test/feed.json",
    "user_comment": "",
    "author": {
        "name": "MayKhineNyein"
    },
    "items": [
        {
            "id": "https://mk-nyein.github.io/publii_test/this-is-the-another-page.html",
            "url": "https://mk-nyein.github.io/publii_test/this-is-the-another-page.html",
            "title": "This is the another page.",
            "summary": "function ListItem({ item }) { return ( &lt;Fragment&gt; &lt;dt&gt;{item.term}&lt;/dt&gt; &lt;dd&gt;{item.description}&lt;/dd&gt; &lt;/Fragment&gt; ); } function Glossary(props) { return ( &lt;dl&gt; {props.items.map(item =&gt; ( &lt;ListItem item={item} key={item.id} /&gt; ))} &lt;/dl&gt; ); }Use context moreAs the officials say about it, Context provides a way to pass data through the&hellip;",
            "content_html": "<pre><code class=\"markup--code markup--pre-code u-paddingRight0 u-marginRight0\">function ListItem({ item }) {<br>  return (<br><strong class=\"markup--strong markup--pre-strong\">    &lt;Fragment&gt;</strong><br>      &lt;dt&gt;{item.term}&lt;/dt&gt;<br>      &lt;dd&gt;{item.description}&lt;/dd&gt;<br><strong class=\"markup--strong markup--pre-strong\">    &lt;/Fragment&gt;</strong><br>  );<br>}<br><br>function Glossary(props) {<br>  return (<br>    &lt;dl&gt;<br>      {props.items.map(item =&gt; (<br>        &lt;ListItem item={item} key={item.id} /&gt;<br>      ))}<br>    &lt;/dl&gt;<br>  );<br>}</code></pre>\n<h3 id=\"1d7d\" class=\"graf graf--h3 graf-after--p\">Use context more</h3>\n<p id=\"c835\" class=\"graf graf--p graf-after--h3\">As the officials say about it, Context provides a way to pass data through the component tree without having to pass props down manually at every level.</p>\n<p id=\"b9ac\" class=\"graf graf--p graf-after--p\">So if you have multiple components that needs a value then use context. If you have only a single child component that needs this value use <a href=\"https://reactjs.org/docs/context.html#before-you-use-context\"  class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">compositions</a>.</p>\n<p id=\"a9c1\" class=\"graf graf--p graf-after--p\">one example to set theme from the official docs,</p>\n<h3 id=\"f0a1\" class=\"graf graf--h3 graf-after--pre\">Have at least one Error Boundaries</h3>\n<p id=\"b0ad\" class=\"graf graf--p graf-after--h3\">React 16 comes with an amazing feature Error Boundaries. As the name suggests, It bounds the error of all the child components. The idea is very simple. Create a React component and use it as parent wherever you want to handle the errors. If there is any error in your child component then your Error Boundary component will be called to handle the error.</p>\n<blockquote id=\"2fe5\" class=\"graf graf--blockquote graf-after--p\"><span class=\"markup--quote markup--blockquote-quote is-other\" >Keep in mind that rendering error are handled using error boundaries. Imperative errors such as in Event handlers should be handled using javascript try/catch blocks.</span></blockquote>",
            "image": "https://mk-nyein.github.io/publii_test/media/posts/2/",
            "author": {
                "name": "MayKhineNyein"
            },
            "tags": [
            ],
            "date_published": "2018-11-26T10:37:31+06:30",
            "date_modified": "2018-11-26T10:37:31+06:30"
        }
    ]
}
